package com.trend_now.backend.board.application;

import com.trend_now.backend.board.domain.Board;
import com.trend_now.backend.board.dto.BoardSaveDto;
import com.trend_now.backend.board.repository.BoardRepository;
import java.time.LocalTime;
import java.util.List;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import lombok.RequiredArgsConstructor;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
@RequiredArgsConstructor
@Transactional(readOnly = true)
public class BoardService {

    private final BoardRepository boardRepository;
    private final RedisTemplate<String, String> redisTemplate;

    //게시판을 저장한다
    @Transactional
    public Long saveBoard(BoardSaveDto boardSaveDto) {
        Board board = Board.builder()
                .name(boardSaveDto.getName())
                .boardCategory(boardSaveDto.getBoardCategory())
                .build();

        boardRepository.save(board);
        return board.getId();
    }

    //게시판이 DB에 존재하지 않을 경우 저장한다
    @Transactional
    public Long saveBoardIfNotExists(BoardSaveDto boardSaveDto) {
        List<Board> findBoard = boardRepository.findByName(boardSaveDto.getName());

        if (findBoard.isEmpty()) {
            Board board = Board.builder()
                    .name(boardSaveDto.getName())
                    .boardCategory(boardSaveDto.getBoardCategory())
                    .build();

            boardRepository.save(board);
            return board.getId();
        }

        return findBoard.get(0).getId();
    }

    public void saveBoardRedis(BoardSaveDto boardSaveDto, int score) {
        String rankKey = "board_rank";
        String key = boardSaveDto.getName();
        long liveTime = 301L;

        Long currentExpire = redisTemplate.getExpire(key, TimeUnit.SECONDS);
        if(currentExpire != null && currentExpire > 0) {
            liveTime += currentExpire;
        }

        redisTemplate.opsForValue().set(key, "실시간 게시글");
        redisTemplate.expire(key, liveTime, TimeUnit.SECONDS);
        redisTemplate.opsForZSet().add(rankKey, key, score);
    }

    public void cleanUpExpiredKeys() {
        String rankKey = "board_rank";

        Set<String> keys = redisTemplate.opsForZSet().range(rankKey, 0, -1);
        if(keys == null || keys.isEmpty()) {
            return;
        }

        for(String key : keys) {
            if(!Boolean.TRUE.equals(redisTemplate.hasKey(key))) {
                redisTemplate.opsForZSet().remove(rankKey, key);
            }
        }
    }

    public void setValidListTime() {
        String key = "board_rank_valid";
        String validTime = Long.toString(LocalTime.now().plusSeconds(301).toSecondOfDay());
        redisTemplate.opsForValue().set(key, validTime);
    }
}
